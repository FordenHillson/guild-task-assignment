import Papa from 'papaparse';

// Auto assignment
export const assignAuto = (members, tierConfig, setAssignments) => {
  let assignments = {};
  let memberGpUsage = {};
  members.forEach(member => memberGpUsage[member.id] = 0);

  // ‡∏à‡∏±‡∏î‡∏•‡∏≥‡∏î‡∏±‡∏ö tier ‡∏ï‡∏≤‡∏° maxGP ‡∏à‡∏≤‡∏Å‡∏°‡∏≤‡∏Å‡πÑ‡∏õ‡∏ô‡πâ‡∏≠‡∏¢ (‡∏à‡∏∞‡πÑ‡∏î‡πâ‡πÄ‡∏ï‡∏¥‡∏°‡∏ó‡∏µ‡πà‡∏ß‡πà‡∏≤‡∏á‡πÄ‡∏¢‡∏≠‡∏∞‡∏Å‡πà‡∏≠‡∏ô)
  const tierEntries = Object.entries(tierConfig).sort((a, b) => b[1].maxGP - a[1].maxGP);

  // ‡πÄ‡∏Å‡πá‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ß‡πà‡∏≤ tier ‡πÑ‡∏´‡∏ô‡∏≠‡∏ô‡∏∏‡∏ç‡∏≤‡∏ï‡∏¥‡πÉ‡∏´‡πâ overflow ‡πÑ‡∏î‡πâ‡∏≠‡∏µ‡∏Å 1 ‡∏Ñ‡∏£‡∏±‡πâ‡∏á
  let tierOverflowAllowed = {};
  tierEntries.forEach(([tierId]) => tierOverflowAllowed[tierId] = true);

  // ‡πÉ‡∏ô‡πÅ‡∏ï‡πà‡∏•‡∏∞ tier ‡∏û‡∏¢‡∏≤‡∏¢‡∏≤‡∏° assign ‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å‡πÉ‡∏´‡πâ‡πÑ‡∏î‡πâ‡∏°‡∏≤‡∏Å‡∏ó‡∏µ‡πà‡∏™‡∏∏‡∏î
  tierEntries.forEach(([tierId, config]) => {
    if (!assignments[tierId]) assignments[tierId] = {};

    // ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì GP ‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ‡πÑ‡∏õ‡πÉ‡∏ô‡πÅ‡∏ï‡πà‡∏•‡∏∞ tier
    let currentGP = 0;

    // ‡πÄ‡∏£‡∏µ‡∏¢‡∏á‡∏•‡∏≥‡∏î‡∏±‡∏ö‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å‡∏ï‡∏≤‡∏° GP ‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ‡πÑ‡∏õ‡πÅ‡∏•‡πâ‡∏ß‡∏à‡∏≤‡∏Å‡∏ô‡πâ‡∏≠‡∏¢‡πÑ‡∏õ‡∏°‡∏≤‡∏Å
    // ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å‡∏ó‡∏µ‡πà‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡∏°‡∏≤‡∏Å‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£ assign ‡∏Å‡πà‡∏≠‡∏ô
    const sortedMembers = [...members].sort((a, b) =>
      (memberGpUsage[a.id] || 0) - (memberGpUsage[b.id] || 0)
    );

    // ‡∏ß‡∏ô loop ‡∏ú‡πà‡∏≤‡∏ô‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å‡∏ó‡∏∏‡∏Å‡∏Ñ‡∏ô
    for (const member of sortedMembers) {
      // ‡∏´‡∏≤ enhancement count ‡∏ó‡∏µ‡πà‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏™‡∏° (‡∏™‡∏∏‡πà‡∏°‡∏£‡∏∞‡∏´‡∏ß‡πà‡∏≤‡∏á 0-3)
      const enhancementCount = Math.floor(Math.random() * 4);
      const memberGP = config.liberation + (enhancementCount * config.enhancement);

      // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤ tier ‡∏ô‡∏µ‡πâ‡∏¢‡∏±‡∏á‡∏°‡∏µ‡∏û‡∏∑‡πâ‡∏ô‡∏ó‡∏µ‡πà‡∏û‡∏≠‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
      // ‡∏´‡∏£‡∏∑‡∏≠‡∏ñ‡πâ‡∏≤‡πÉ‡∏Å‡∏•‡πâ‡πÄ‡∏ï‡πá‡∏°‡πÅ‡∏•‡πâ‡∏ß ‡πÅ‡∏•‡∏∞‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÄ‡∏Ñ‡∏¢ overflow ‡∏Å‡πá‡∏≠‡∏ô‡∏∏‡∏ç‡∏≤‡∏ï‡∏¥‡πÉ‡∏´‡πâ overflow ‡πÑ‡∏î‡πâ 1 ‡∏Ñ‡∏£‡∏±‡πâ‡∏á
      const isNearlyFull = (config.maxGP - currentGP < config.liberation * 2); // ‡∏ñ‡∏∑‡∏≠‡∏ß‡πà‡∏≤‡πÉ‡∏Å‡∏•‡πâ‡πÄ‡∏ï‡πá‡∏°‡∏ñ‡πâ‡∏≤‡πÄ‡∏´‡∏•‡∏∑‡∏≠‡∏ô‡πâ‡∏≠‡∏¢‡∏Å‡∏ß‡πà‡∏≤ liberation * 2

      if (currentGP + memberGP <= config.maxGP ||
        (isNearlyFull && tierOverflowAllowed[tierId] && currentGP > 0)) {

        // ‡∏ñ‡πâ‡∏≤‡πÄ‡∏õ‡πá‡∏ô‡∏Å‡∏≤‡∏£ overflow ‡πÉ‡∏´‡πâ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞
        if (currentGP + memberGP > config.maxGP) {
          tierOverflowAllowed[tierId] = false;
        }

        assignments[tierId][member.id] = { liberation: 1, enhancement: enhancementCount };
        currentGP += memberGP;
        memberGpUsage[member.id] = (memberGpUsage[member.id] || 0) + memberGP;
      }
    }
  });

  // ‡∏£‡∏≠‡∏ö‡∏ó‡∏µ‡πà 2: ‡∏û‡∏¢‡∏≤‡∏¢‡∏≤‡∏°‡πÄ‡∏ï‡∏¥‡∏° GP ‡∏ó‡∏µ‡πà‡πÄ‡∏´‡∏•‡∏∑‡∏≠‡πÉ‡∏ô‡πÅ‡∏ï‡πà‡∏•‡∏∞ tier ‡πÇ‡∏î‡∏¢‡πÉ‡∏´‡πâ‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏£‡∏±‡∏ö‡πÑ‡∏î‡πâ‡∏´‡∏•‡∏≤‡∏¢ tier
  let remainingAssignmentsMade = true;
  let maxRounds = 3; // ‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡∏ß‡∏ô‡∏•‡∏π‡∏õ‡πÑ‡∏°‡πà‡∏£‡∏π‡πâ‡∏à‡∏ö

  while (remainingAssignmentsMade && maxRounds > 0) {
    remainingAssignmentsMade = false;
    maxRounds--;

    // ‡πÄ‡∏£‡∏µ‡∏¢‡∏á‡∏•‡∏≥‡∏î‡∏±‡∏ö tier ‡∏ï‡∏≤‡∏° GP ‡∏ó‡∏µ‡πà‡πÄ‡∏´‡∏•‡∏∑‡∏≠‡∏≠‡∏¢‡∏π‡πà‡∏à‡∏≤‡∏Å‡∏°‡∏≤‡∏Å‡πÑ‡∏õ‡∏ô‡πâ‡∏≠‡∏¢
    const tiersWithCapacity = [...tierEntries]
      .map(([tierId, config]) => {
        const usedGP = Object.values(assignments[tierId] || {}).reduce((sum, a) =>
          sum + (a.liberation * config.liberation) + (a.enhancement * config.enhancement), 0);
        return { tierId, config, remainingGP: config.maxGP - usedGP };
      })
      // ‡∏ï‡∏±‡∏ß‡∏Å‡∏£‡∏≠‡∏á‡∏ß‡πà‡∏≤‡∏°‡∏µ‡∏ó‡∏µ‡πà‡πÄ‡∏´‡∏•‡∏∑‡∏≠‡∏´‡∏£‡∏∑‡∏≠‡∏¢‡∏±‡∏á‡∏≠‡∏ô‡∏∏‡∏ç‡∏≤‡∏ï‡∏¥‡πÉ‡∏´‡πâ overflow ‡πÑ‡∏î‡πâ‡∏≠‡∏µ‡∏Å 1 ‡∏Ñ‡∏£‡∏±‡πâ‡∏á
      .filter(t => t.remainingGP > 0 || (tierOverflowAllowed[t.tierId] && t.remainingGP > -t.config.maxGP * 0.05))
      .sort((a, b) => b.remainingGP - a.remainingGP);

    // ‡∏ß‡∏ô‡∏•‡∏π‡∏õ tier ‡∏ó‡∏µ‡πà‡∏¢‡∏±‡∏á‡∏°‡∏µ capacity ‡πÄ‡∏´‡∏•‡∏∑‡∏≠
    for (const { tierId, config, remainingGP } of tiersWithCapacity) {
      // ‡πÄ‡∏£‡∏µ‡∏¢‡∏á‡∏•‡∏≥‡∏î‡∏±‡∏ö‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å‡∏ï‡∏≤‡∏° GP ‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ‡πÑ‡∏õ‡πÅ‡∏•‡πâ‡∏ß‡∏à‡∏≤‡∏Å‡∏ô‡πâ‡∏≠‡∏¢‡πÑ‡∏õ‡∏°‡∏≤‡∏Å
      const sortedMembers = [...members].sort((a, b) =>
        (memberGpUsage[a.id] || 0) - (memberGpUsage[b.id] || 0)
      );

      // ‡∏•‡∏≠‡∏á‡∏Å‡∏±‡∏ö‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å‡∏ó‡∏∏‡∏Å‡∏Ñ‡∏ô
      for (const member of sortedMembers) {
        // ‡∏ñ‡πâ‡∏≤‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å‡∏°‡∏µ assignment ‡πÉ‡∏ô tier ‡∏ô‡∏µ‡πâ‡πÅ‡∏•‡πâ‡∏ß ‡πÉ‡∏´‡πâ‡∏Ç‡πâ‡∏≤‡∏°‡πÑ‡∏õ
        if (assignments[tierId] && assignments[tierId][member.id]) continue;

        // ‡∏ó‡∏î‡∏•‡∏≠‡∏á‡∏Å‡∏±‡∏ö enhancement ‡∏Ñ‡πà‡∏≤‡∏ï‡πà‡∏≤‡∏á‡πÜ
        for (let enh = 0; enh <= 3; enh++) {
          const memberGP = config.liberation + (enh * config.enhancement);

          // ‡∏≠‡∏ô‡∏∏‡∏ç‡∏≤‡∏ï‡∏¥‡πÉ‡∏´‡πâ overflow ‡πÑ‡∏î‡πâ‡∏ñ‡πâ‡∏≤‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÄ‡∏Ñ‡∏¢ overflow ‡πÉ‡∏ô tier ‡∏ô‡∏µ‡πâ
          // ‡πÅ‡∏•‡∏∞ tier ‡∏°‡∏µ assignments ‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß (‡πÑ‡∏°‡πà‡∏ß‡πà‡∏≤‡∏á)
          const canAssign = memberGP <= remainingGP ||
            (tierOverflowAllowed[tierId] &&
              Object.keys(assignments[tierId] || {}).length > 0 &&
              remainingGP > -config.maxGP * 0.05);

          if (canAssign) {
            if (!assignments[tierId]) assignments[tierId] = {};

            // ‡∏ñ‡πâ‡∏≤‡πÄ‡∏õ‡πá‡∏ô‡∏Å‡∏≤‡∏£ overflow ‡πÉ‡∏´‡πâ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞
            if (memberGP > remainingGP) {
              tierOverflowAllowed[tierId] = false;
            }

            assignments[tierId][member.id] = { liberation: 1, enhancement: enh };
            memberGpUsage[member.id] = (memberGpUsage[member.id] || 0) + memberGP;
            remainingAssignmentsMade = true;
            break; // ‡∏´‡∏¢‡∏∏‡∏î loop enhancement
          }
        }

        // ‡∏ñ‡πâ‡∏≤ assign ‡πÅ‡∏•‡πâ‡∏ß‡∏≠‡∏≤‡∏à‡∏à‡∏∞‡πÄ‡∏ï‡πá‡∏° tier ‡πÅ‡∏•‡πâ‡∏ß ‡πÉ‡∏´‡πâ‡πÑ‡∏õ‡∏ï‡πà‡∏≠ tier ‡∏ñ‡∏±‡∏î‡πÑ‡∏õ
        const updatedUsedGP = Object.values(assignments[tierId] || {}).reduce((sum, a) =>
          sum + (a.liberation * config.liberation) + (a.enhancement * config.enhancement), 0);
        if (config.maxGP - updatedUsedGP < config.liberation && !tierOverflowAllowed[tierId]) {
          break; // ‡∏´‡∏¢‡∏∏‡∏î loop member
        }
      }
    }
  }

  setAssignments(assignments);
};

// Export assignments to CSV
export const exportAssignments = (members, assignments, tierConfig) => {
  // ‡∏™‡∏£‡πâ‡∏≤‡∏á rows
  let rows = [["Name", "Tier", "Liberation", "Enhancement", "GP (This Tier)", "GP (Total)"]];
  // ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì GP ‡∏£‡∏ß‡∏°‡∏ï‡πà‡∏≠ member
  const memberGPMap = {};
  members.forEach(member => {
    let total = 0;
    Object.entries(assignments).forEach(([tierId, tierAssign]) => {
      if (tierAssign[member.id]) {
        const conf = tierConfig[tierId];
        const c = tierAssign[member.id];
        total += (c.liberation * conf.liberation) + (c.enhancement * conf.enhancement);
      }
    });
    memberGPMap[member.id] = total;
  });

  Object.entries(assignments).forEach(([tierId, tierAssign]) => {
    Object.entries(tierAssign).forEach(([memberId, c]) => {
      const member = members.find(m => m.id.toString() === memberId.toString());
      if (!member) return;
      const conf = tierConfig[tierId];
      const tierGP = (c.liberation * conf.liberation) + (c.enhancement * conf.enhancement);
      rows.push([
        member.name,
        tierId,
        c.liberation,
        c.enhancement,
        tierGP,
        memberGPMap[member.id]
      ]);
    });
  });

  // ‡πÅ‡∏õ‡∏•‡∏á array ‡πÄ‡∏õ‡πá‡∏ô CSV string
  const csvContent = rows.map(r => r.join(",")).join("\n");
  const blob = new Blob([csvContent], { type: 'text/csv' });
  const url = URL.createObjectURL(blob);
  const a = document.createElement('a');
  a.href = url;
  a.download = 'assignment_report.csv';
  a.click();
  URL.revokeObjectURL(url);
};

// Import assignments from CSV
export const importAssignments = (file, members, tierConfig, setAssignments) => {
  Papa.parse(file, {
    header: true,
    complete: (results) => {
      const newAssignments = {};
      
      // Group rows by tier
      results.data.forEach(row => {
        if (!row.Tier && !row.tier) return; // Skip invalid rows
        
        const tierId = row.Tier || row.tier;
        const memberName = row.Name || row.name;
        const liberation = parseInt(row.Liberation || row.liberation) || 1;
        const enhancement = parseInt(row.Enhancement || row.enhancement) || 0;
        
        // Find the member by name
        const member = members.find(m => m.name === memberName);
        if (!member) {
          console.warn(`Member ${memberName} not found. Skipping assignment.`);
          return;
        }
        
        // Initialize tier if needed
        if (!newAssignments[tierId]) {
          newAssignments[tierId] = {};
        }
        
        // Add assignment
        newAssignments[tierId][member.id] = {
          liberation,
          enhancement
        };
      });
      
      setAssignments(newAssignments);
    },
    error: (error) => {
      console.error('CSV parsing error:', error);
      alert('Error parsing CSV file. Please check the format.');
    }
  });
};

// Generate sample CSV
export const generateSampleCSV = () => {
  const csvContent = "name,avatar\nJohn,üßë\nJane,üë©\nMike,üë®\nSarah,üë±\nTom,üßî";
  const blob = new Blob([csvContent], { type: 'text/csv' });
  const url = URL.createObjectURL(blob);
  const a = document.createElement('a');
  a.href = url;
  a.download = 'sample_members.csv';
  a.click();
  URL.revokeObjectURL(url);
};
